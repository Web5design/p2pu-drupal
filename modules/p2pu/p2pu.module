<?php

if (!function_exists('sprint_r')) {
  function sprint_r($var) {
    ob_start();
    print_r($var);
    $ret = ob_get_contents();
    ob_end_clean();
    return $ret;
  }
}


/*
 * Defines
 */

/*
 * Hook implementations
 */

/*
 * Implementation hook_init
 */
function p2pu_init() {
  //Evil hack to set the group context on my panel paths
  $item = menu_get_item();

  // Use the menu system to get the path.
  $path = $item['path'];

  // Check if this is an existing node.
  if ($path == 'node/%/document' || $path == 'node/%/course/admin' || $path == 'node/%/shoutbox' || $path == 'node/%/dashboard' || $path == 'node/%/discussions' || $path == 'node/%/forums') {
    $node = menu_get_object('pm_arg', 1);
    $node = $node->data;
  }

  if (!empty($node) && ($group_node = og_determine_context_get_group($node))) {
    og_set_group_context($group_node);
  }
}

/**
 * Implementation of hook_perm
 */
function p2pu_perm() {
  return array('administer p2pu settings','schedule courses');
}

/**
 * Implementation of hook_block().
 *
 */
function p2pu_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  switch ($op) {
    case 'list':
      $block = array();
      $blocks[0]['info'] = t('P2PU custom comment block');
      $blocks[0]['cache'] = BLOCK_NO_CACHE;
      $blocks[1]['info'] = t('P2PU custom OG forum block');
      $blocks[1]['cache'] = BLOCK_NO_CACHE;
      $blocks[2]['info'] = t('P2PU custom forum post node page with comments');
      $blocks[2]['cache'] = BLOCK_NO_CACHE; 
      $blocks[3]['info'] = t('P2PU custom forum RSS icon block');
      $blocks[4]['info'] = t('P2PU custom course admin signups toggle block');
      $blocks[5]['info'] = t('P2PU custom course navigation for nodes within a course');
      $blocks[6]['info'] = t('P2PU custom tweetable course text plus tweet button');
      return $blocks;
    case 'view':
   $block = array();

    switch ($delta) {
      case 0:
        if (user_access('post comments')) {
          // Confirm that we are displaying this on the course node, discussion variant (node/765/discussions/3082) OR
          // On the assignment submission page (assignment-submission/rebeccas-assignment) OR
          // On the document page (node/765/document/3082)
          $subject = t('Add a comment');
          $anchor = "<a id='add-comment-anchor'></a>\n";
          if (arg(0) == 'node' && is_numeric(arg(1)) && (arg(2) == 'discussions' || arg(2) == 'document' || arg(2) == 'forums') && is_numeric(arg(3))) {
            $block['subject'] = $subject;
            // We want to put in an anchor here so that we can target the add comment
            // form from the add comment link
            $block['content'] = $anchor;
            $block['content'] .= drupal_get_form('comment_form', array('nid' => arg(3)));
          }
          // Now for assignment submissions which is displayed with a slightly different path
          $alias = drupal_get_path_alias($_GET['q']);
          $alias_parts = explode('/', $alias);
          if (arg(0) == 'node' && is_numeric(arg(1)) && $alias_parts[1] == 'assignment-submission') {
            $block['subject'] = $subject;
            $block['content'] = $anchor;
            $block['content'] .= drupal_get_form('comment_form', array('nid' => arg(1)));
          }        
        }
        return $block;

      case 1:
        // Display the group 'general discussion' forum
        // Don't display anything if it's displaying a forum topic
        if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'forums' && !(is_numeric(arg(3)))) {
          // Load the general discussion forum taxonomy term id
          $forum_tid = p2pu_get_discussion_forum_tid(arg(1));
          if (og_forum_is_public($forum_tid) || (!empty($user->og_groups) && array_key_exists($arg, $user->og_groups)) || user_access('administer forums')){
            require_once(drupal_get_path('module', 'forum').'/forum.pages.inc');
            $block['subject'] = t('Discussion Forum');
            $block['content'] = forum_page($forum_tid);
          }
          else
            return FALSE;
        } 
        return $block;
      case 2:
        // This will display a full forum node for placing in a panel page where
        // we don't have access to the node's context, as is the case when we're
        // dispaying the forum post from the course panel override - if we load
        // the node in the panel, it doesn't display the comments, as I think there's
        // no context.
        if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'forums' && is_numeric(arg(3))) {
          // Load the full forum post node
          $node = node_load(array("nid" => arg(3)));
          $block['subject'] = $node->title;
          $block['content'] = node_page_view($node);
        }
        else
          return FALSE;
        return $block;
      case 3:
        // Display the forum rss feed icon in a block
        if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'forums' && !(is_numeric(arg(3)))) {
          // Load the full forum post node
          $forum_tid = p2pu_get_discussion_forum_tid(arg(1));
          $feed_path = "taxonomy/term/$forum_tid/0/feed"; // is there a better way to do this?
          $title_text = "Subscribe to this discussion forum's RSS feed";
          $title = t($title_text);
          $rss_link = l($title_text, $feed_path);
          $node = node_load(array("nid" => arg(3)));
          $block['subject'] = '';
          $block['content'] = theme_feed_icon($feed_path, $title);
          $block['content'] .= "<span id='discussion-feed-icon-text'>$rss_link</span>";
        }
        else
          return FALSE;
        return $block;
      case 4:
      // Display the course open/close signups link to course admins
        $group = og_get_group_context();
        if ($group->type == 'course' && og_is_group_admin($group)) {
          if ($group->og_selective != OG_CLOSED) {
            $text = 'Close Applications';
          } else {
            $text = 'Re-open Applications';
          }
          $link = l($text, "toggle-signup/".$group->nid);
          $block['subject'] = '';
          $block['content'] = $link;
        }          
        else
          return FALSE;
        return $block;
      case 5:
      /* When viewing a node that is part of a course, we want to display the
        course menu so this navigation remains consistent throughout.
        So we get the course the node belongs to, load and output the course
        primary local tasks menu.
        We don't want to display on the course node itself, only on nodes that
        are part of the course. May have to improve how we do this.
        
        Conditions - Show on the following pages:
          When adding a node that is part of a course
          When editing a node that is part of a course
      */
        // When adding a node, the context is given in the query string
        //if (isset($_GET['gid']) && $_GET['gid']) {
        //  $group_node = node_load($_GET['gid']);
        //  og_set_group_context($group_node);
        //}
        $group = og_get_group_context();
        // Work through our conditions
        if ($group->type == 'course') {
          if (arg(0) == 'node' && is_numeric(arg(1))) {
            // Don't display on group nodes, e.g. the course node itself
            $node = node_load(arg(1));
            $content_type = $node->type;
            $usage = variable_get('og_content_type_usage_'. $content_type, 'omitted');
            if ($usage == 'group') {
              return FALSE;
            }
          }
          elseif (arg(0) == 'node' && arg(1) == 'add') {
            // We're adding a node so we get the content type from the url
            $content_type = arg(2);
          }
          elseif (arg(0) == 'comment' && arg(1) == 'reply' && is_numeric(arg(2))) {
            // For replies to comments in group posts or the group itself
            // If the comment is a reply to the group itself, we leave the active
            // tab to be the course home page (so content type 'course' is ignored)
            $node = node_load(arg(2));
            $content_type = $node->type;         
          }
          // TODO: perhaps move this into the else of the if ($usage) loop, depending
          // on where we want this displayed.
          // Also need to append the node type and node id to the url so that 
          // the correct active link can be specified. There is some duplication
          // here with the p2pu_nodeapi function

          $fake_path = 'node/' . $group->nid;
          switch ($content_type) {
            case 'document':
              $fake_path .= '/document/' . $node->nid;
              break;
            case 'forum':
              $fake_path .= '/forums/' . $node->nid;
              break;
            case 'event':
              $fake_path .= '/calendar';
              break;
          }
          $tabs = p2pu_custom_menu_local_tasks($fake_path);
          if (!empty($tabs)) {
            // Remove any active tab classes
            //$tabs = str_replace('active', '', $tabs);
            $tabs = str_replace(t('View'), t('Course Home'), $tabs);
            $block['subject'] = $group->title;
            $block['content'] = "<div class='tabs float-container'>\n";
            $block['content'] .= "<ul class=\"tabs primary\">\n". $tabs ."</ul>\n";
            $block['content'] .= "</div>\n";            
          }
          else
            return FALSE;

        }          
        else
          return FALSE;
        return $block;
      case 6:
      // Display a tweet this button which includes the course short description text in the tweet
        $group = og_get_group_context();
        if ($group->type == 'course' && !empty($group->field_course_short_desc[0]['value'])) {
          $tweet_text = content_format('field_course_short_desc', $group->field_course_short_desc[0], 'default');
          $block_html = "<div id='tweet-text-and-button'>\n";
          $block_html .= "<div class='field-field-course-short-desc'>$tweet_text</div>\n";
          $related_account = 'p2pu:P2P University, learning for everyone, by everyone, about almost anything.';
          $button = '<div id="tweet-button"><a href="http://twitter.com/share" class="twitter-share-button" data-related="' . $related_account . '" data-text="' . $tweet_text . '" data-count="none">Tweet</a>';
          $button .= '<script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script></div>';
          $block_html .= $button;
          $block_html .= "</div>\n";
          $block['subject'] = '';
          $block['content'] = $block_html;
        }
        else
          return FALSE;
        return $block;
    }      
  }
}      
/**
 * Gets the taxonomy term id of the group's general discussion forum.
 */
function p2pu_get_discussion_forum_tid($gid) {
    // Load the general discussion forum
  $forum_tid  = og_forum_get_forum_container($gid);
  $children = taxonomy_get_children($forum_tid);
  $children_tids = array_keys($children);
  // General discussion is the 1st item
  return $children_tids[0];
}

/**
 * This function is called when a course status is closed('30_complete'),
 * see hook_nodeapi, node type 'course' & op is 'update' 
 */
function p2pu_close_course($nid){
  //set comments for this node to be readonly
  $comment_query = db_query("UPDATE {node} SET comment = 1 WHERE nid = %d",$nid);
  //set comments for this node's material to be readonly
  $sub_nodes_query = db_query("SELECT nid FROM {og_ancestry} o where group_nid =%d",$nid);
  if(db_affected_rows()>0){    
    while($sub_nodes= db_fetch_object($sub_nodes_query)){      
      $comment_sub_items_query = db_query("UPDATE {node} SET comment = 1 WHERE nid = %d",$sub_nodes->nid);
    }
  }
 
  
}
/**
 * This function is called when a course status is running/open,
 * see hook_nodeapi, node type 'course' & op is 'update' 
 */
function p2pu_open_course($nid){
  //set comments for this node to be read/write
  $comment_query = db_query("UPDATE {node} SET comment = 2 WHERE nid = %d",$nid);
  //set comments for this node's material to be read/write
  $sub_nodes_query = db_query("SELECT nid FROM {og_ancestry} o where group_nid =%d",$nid);
  if(db_affected_rows()>0){    
    while($sub_nodes= db_fetch_object($sub_nodes_query)){      
      $comment_sub_items_query = db_query("UPDATE {node} SET comment = 2 WHERE nid = %d",$sub_nodes->nid);
    }
  }
  
}
///**
// * Returns an array of all books.
// *
// * This list may be used for generating a list of all the books, or for building
// * the options for a form select.
// */
//function p2p_og_get_books() {
//  static $all_books;
//  
//  //$node =  node_load(arg(1));
//  $node = og_get_group_context();
//  
//  if (!isset($node->og_selective)) {
//    return array();
//  }
//  $group_id = $node->nid;
//
//  if (!isset($all_books)) {
//    $all_books = array();
//    $result = db_query("SELECT DISTINCT(bid) FROM {book}");
//    $nids = array();
//    while ($book = db_fetch_array($result)) {
//      $nids[] = $book['bid'];
//    }
//    if ($nids) {
//      $result2 = db_query(db_rewrite_sql("SELECT n.type, n.title, b.*, ml.* FROM {book} b INNER JOIN {node} n on b.nid = n.nid INNER JOIN {menu_links} ml ON b.mlid = ml.mlid INNER JOIN {og_ancestry} oa ON oa.nid = n.nid WHERE n.nid IN (". implode(',', $nids) .") AND n.status = 1 AND oa.group_nid = %d ORDER BY ml.weight, ml.link_title"), $group_id);
//      while ($link = db_fetch_array($result2)) {
//        $link['href'] = $link['link_path'];
//        $link['options'] = unserialize($link['options']);
//        $all_books[$link['bid']] = $link;
//      }
//    }
//  }
//  return $all_books;
//}

// This is not yet used, should replace the subscribe block when we have time to change it
function p2pu_signup_link_for_block () {
  $group = og_get_group_context();
  global $user;
  if ($user->uid == 0) {
    $register = l('register', 'user/register', array('query' => 'destination=node/'.$group->nid));
    $login = l('login', 'user/login', array('query' => 'destination=node/'.$group->nid));
    print ('You must '.$register.' or '.$login.' in order to post into this group.');
    return;  
  }
  if (!og_is_group_member($group->nid,FALSE) && $group->og_selective <= 1) {
    $label = 'Sign up';
    if ($group->og_selective == 0) {
      $label = 'Join';
    }
    $link = l($label, 'og/subscribe/'.$group->nid, array('query' => 'destination=node/'.$group->nid));
    print ($link);
    return;
  }
}

/**
 * Implementation of hook_nodeapi
 */
function p2pu_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view':
      switch($node->type) {
        case 'document':
          if (isset($node->og_groups)) {
            $og_groups = array_values($node->og_groups);
            if (arg(2) != 'document' && arg(1) == $node->nid) {
              drupal_goto('node/'.$og_groups[0].'/document/'.$node->nid);
            }
          }
        break;
        case 'discussion':
          if (isset($node->og_groups)) {
            $og_groups = array_values($node->og_groups);
            if (arg(2) != 'discussion' && arg(1) == $node->nid) {
              drupal_goto('node/'.$og_groups[0].'/discussions/'.$node->nid);
            }
          }
        break;
        case 'forum':
          if (isset($node->og_groups)) {
            $og_groups = array_values($node->og_groups);
            if (arg(2) != 'forums' && arg(1) == $node->nid) {
              drupal_goto('node/'.$og_groups[0].'/forums/'.$node->nid);
            }
          }
        break;
      }
      break;
    case 'presave':
      //dsm($node);
      //dsm($op);
      //dsm($a3);
      //dsm($a4);
      
      break;
    case 'insert':
      switch ($node->type) {
        case 'announcement':
        case 'assignment':
        case 'assignment_template':
        case 'discussion':
        case 'document':
        case 'event':
        case 'report_card':
        case 'submission':
          $group_node = og_get_group_context();
          $node->og_groups = array( $group_node->nid);
          og_save_ancestry($node);
          
        break;
//        case 'submission':
//          if (!isset($node->og_groups)  || count($node->og_groups) == 0) {
//            $group_node = og_get_group_context();
//            $node->og_groups = array($node->field_submission_assignment[0]['nid']);
//            og_save_ancestry($node);
//          }
//          break;
      }
      //adw: this is a hack to fix og_access setting nodes to private. Everything should be public
      db_query("update og_access_post set og_public=1 where og_public=0"); 
      break;
    case 'update':
      switch ($node->type) {
        case 'announcement':
        case 'assignment':
        case 'assignment_template':
        case 'submission':
        case 'discussion':
        case 'document':
        case 'event':
        case 'report_card':
          $group_node = og_get_group_context();
          $node->og_groups = array( $group_node->nid);
          og_save_ancestry($node);
          
        break;
        case 'course':
          if($node->field_course_status[0]['value'] =='30_complete'){
            p2pu_close_course($node->nid); //sets the comments to be read only
          }else{
            p2pu_open_course($node->nid); //sets the comments to be read/write
          }          
        break;
      }
      //adw: this is a hack to fix og_access setting nodes to private. Everything should be public
      db_query("update og_access_post set og_public=1 where og_public=0"); 
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function p2pu_menu() {
  $items = array();

  //Administration form
  $items['admin/settings/p2pu'] = array(
    'title' => t('P2PU Settings'),
    'description' => t('Settings and configuration for the P2PU System'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('p2pu_settings_form'),
  	'access arguments' => array('administer p2pu settings'),
  );

  // Course create function
  $items['course/create'] = array(
    'title' => t('Create Course'),
    'description' => t('Create a course from a course template'),
    'page callback' => 'p2pu_course_create_course',
    'access arguments' => array('schedule courses'),
    'type' => MENU_CALL_BACK,
  );

  // Show application form for user
  $items['course/application'] = array(
    'title' => t('Course application'),
    'description' => t('Course application'),
    'page callback' => 'p2pu_course_application',
    'access arguments' => array('access content'),
    'type' => MENU_CALL_BACK,
  );
  
  // Shout form
  $items['shout-form'] = array(
    'title' => t('Shout Form'),
    'description' => t('Shout Form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('p2pu_shout_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
   );

  // Toggle signup type
  $items['toggle-signup/%node'] = array(
    'title' => 'Change Group Signup',
    'page callback' => 'p2pu_toggle_signup',
    'page arguments' => array(1),
    'access callback' => 'og_is_group_admin',
    'access arguments' => array(1),
    'type' => MENU_CALL_BACK,
  );

  // IRC Channel
  $items['node/%node/chat'] = array(
    'title' => 'Chat',
    'page callback' => 'p2pu_chat_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
  );

  // Flags: Provide a way to get flag data to jQuery
  $items['p2pu_flag/get'] = array(
    'title' => 'Get node flag indication text',
    'page callback' => 'p2pu_flag_get_item_text_ajax',
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  //Export Node tracker results in CSV format
  $items['tracker_export/%node'] = array(
    'title' => 'Data export',
    'page callback' => 'p2pu_node_tracker',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access statistics'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,    
  );

  return $items;
}


//Returns access statistics for node
function p2pu_node_tracker() {  
  //based on the statistics_node_tracker function in statistics.pages.inc (Statistcs Module)    
  if ($node = node_load(arg(1))) {

    $filename = $node -> path ."_" .date("d-m-Y") .".csv";
    $header = array('Log ID','Time', 'Page Title', 'Path','Referrer','User ID', 'User Name');

    $result = db_query("SELECT a.aid, from_unixtime(a.timestamp), a.title, a.path, a.url, a.uid, u.name FROM {accesslog} a LEFT JOIN {users} u ON a.uid = u.uid WHERE a.path = 'node/%d' OR a.path LIKE 'node/%d/%%' ORDER BY timestamp DESC LIMIT 50000", $node->nid, $node->nid);
    p2pu_export_csv($header,$result, $filename);    
    exit;
  }
  else {
    drupal_not_found();
  }
}

//Export a result set as a CSV file
function p2pu_export_csv($header, $result,  $filename = 'tracker.csv'){
  drupal_set_header('Content-Type: text/csv');
  drupal_set_header('Content-Disposition: attachment; filename=' . $filename);
    
  print implode(',', $header) ."\r\n";

  while($row = db_fetch_array($result)){
    foreach($row as $value){
      $values[] = '"' . str_replace('"', '""', decode_entities(strip_tags($value))) . '"';
    }
    print implode(',', $values) ."\r\n";
    unset($values);
  }
}

/*
 * Flag related function to be used via ajax
 * 
 * Fetches some text to display an indication of who has flagged an item.
 *
 * @param $flag_name
 *   The unique name of the flag 
 * @param $item_id
 *   The content ID who's flags we are checking (usually the node ID or comment ID).
 *
 * @return json array with 2 values: isText indicates whether there's a flag
 *   and flagIndicationText, the actual text string
 */
function p2pu_flag_get_item_text_ajax($flag_name, $item_id) {
  $is_text = 0;
  if ($text = p2pu_get_item_flag_indication($flag_name, $item_id)) {
    $is_text = 1;
  }
  drupal_json(array('isText' => $is_text, 'flagIndicationText' => $text));
}

//Creates a chat page based on the Course parameters
function p2pu_chat_page($node) {
  global $user;
  $irc_channel = 'p2pu-' .$node -> path;
  $nick = $user -> name;
  return '<div id="chat_box" style="text-align:center;width:100%;"><iframe src="http://webchat.freenode.net?channels=' .$irc_channel .'&nick=' .$nick .'&uio=MT1mYWxzZSYzPWZhbHNlJjk9dHJ1ZSYxMD10cnVl32&prompt=1" width="860" height="400"></iframe></div>';
}

/*
 * Implement hook_menu_alter(&$items)
 */

function p2pu_menu_alter(&$items) {

  unset($items['user/%user/imce']);
  $items['user/register']['weight'] = 1;
  $items['user/password']['weight'] = 2;
  // Hide the og forums menu item
  //unset($items['node/%og_forum_group_type/og/forum']);
  // For some reason the above didn't work, so unsent the type to hide the og forums menu item
  unset($items['node/%og_forum_group_type/og/forum']['type']);

}

function p2pu_og_forum_link_redirect($ctid = 0) {
  global $user;
  $children = taxonomy_get_children($ctid);
  $children_tids = array_keys($children);
  $tid = $children_tids[0];
  if (og_forum_is_public($tid) || (!empty($user->og_groups) && array_key_exists($arg, $user->og_groups)) || user_access('administer forums')){
    drupal_goto('forum/'.$tid);
  }
  else
    return FALSE;
}

function p2pu_link_alter(&$links, $node) {
  // We want to change the 'add new comment' link so that on click it takes
  // to an anchor on the same page. This anchor is set in our p2pu comment block
  $content_types = array(
    'discussion',
    'document',
    'submission',
  );
  if (in_array($node->type, $content_types) && isset($links['comment_add'])) {
    $links['comment_add']['href'] = $_GET['q'];
    $links['comment_add']['fragment'] = 'add-comment-anchor';
  }
}

/**
 * Implementation of hook_cron
 */
function p2pu_cron() {
  //adw: this may start running slow later, will need to find the bug sometime
  db_query("insert into node_access (nid,gid,realm,grant_view,grant_update,grant_delete)  select nid,0,'all',1,0,0 from node where nid not in (select nid from node_access where realm='all')");
}

/**
 * Implementation of hook_link
 */
function p2pu_link($type, $object, $teaser = FALSE) {
  $links = array();
  if ($type == 'node' && $object->type == 'course' && og_is_group_admin($object)) {
    if ($object->og_selective != OG_CLOSED) {
      $text = 'Close Applications';
    } else {
      $text = 'Re-open Applications';
    }
    $links[''] = array(
      'title' => t($text),
      'href' => "toggle-signup/".$object->nid,
    );
  }
  return $links;
}

function p2pu_filter_course_status_select($form) {
  //control what appears in the dropdown, depending on context
  
  // the following course status' exist
  // 00_draft|Draft
  // 10_open|Open for registration
  // 20_running|Running
  // 30_complete|Complete
  // 40_archived|Archived
  
  // we need to control the contents of the course status box, depending on the context
  // the rules are as follows:
  // 1. if the course is being created , create course with status = draft
  
  $current_default = $form['field_course_status']['#default_value'][0]['value'];
  $full_list = $form['#field_info']['field_course_status']['allowed_values'];
  // if the course is being created, restrict it to the draft view
  if (empty($form['nid']['#value'])) {
    return "00_draft|Draft";
  }
  
  //otherwise return the full list
  return $full_list;
}

/*
Validate the terms and conditions checkbox field, used on registration and course join.
*/
function p2pu_terms_and_cond_validate($element, &$form_state){ 
  if($form_state['values']['terms_and_cond'] !=1){
     form_error($element, t('You must agree to the P2PU terms and conditions to continue.'));
  } 
}

/**
 * Implementation of hook_form_alter
 */
function p2pu_form_alter(&$form, $form_state, $form_id) {

  global $user;

  //Adding a link back to the thread on the comment form
  if ($form['#id'] == 'comment-form') {
    $form['comment_link'] = array(
       '#prefix' => '<div style="position:relative;width:100%;"><div class="comment_link">',
       '#value' => l(t('Go back to thread'), 'node/' .$form['nid']['#value']),
       '#suffix' => '</div></div>',
       '#weight' => -100,
    );
  }

  //Adding a checkbox in the user_register form.
  if($form_id =="user_register"){     
      $form['terms_and_cond'] = array(
      '#type' => 'checkbox',     
      '#title' => t("By creating an account on p2pu.org, you accept our !privacy , !license and !terms. By default all content you create and conversations you have with other users on this site are publicly viewable.", array('!privacy' => l(t("privacy guidelines"),"privacy"), '!license'=>l(t("license provisions"),"license"), '!terms'=>l(t("terms of use"),"terms-of-use") )),
      '#weight'=>10,
      '#element_validate' => array('p2pu_terms_and_cond_validate'),
    );      
  }

  //Extra validation on the admin settings form
  if ($form_id == 'p2pu_settings_form') {
    $form['#validate'][] = 'p2pu_settings_form_validate';
  }
  
  //To restrict book ouline only to book page types
  if (isset($form['book']) && $form['type']['#value'] != 'book') {
    $form['book']['#type'] = 'hidden';
  }  
  if ($form_id == 'course_node_form') {
    //dprint_r($form);
    $form['#field_info']['field_course_status']['allowed_values'] = p2pu_filter_course_status_select($form);
    $form['title']['#maxlength'] = 30;
    if (in_array('webmaster', array_values($user->roles))) {
      //expand the publishing fieldset
      $form['options']['#collapsed'] = FALSE;
    }    
    // Hide from non admin users:
    // syllabus node reference field; course dates field;
    // And don't allow them to change the course status
    if (!in_array('system', array_values($user->roles)) && !in_array('webmaster', array_values($user->roles))) {

      //Hide all the og settings and give them specific default values

      $form['og_language']['#type'] = 'hidden';
      $form['og_language']['#value'] = 'p2pu';
      $form['og_language']['#default_value'] = 'p2pu';
      
      $form['og_description']['#type'] = 'hidden';
      $form['og_description']['#value'] = 'course';
      $form['og_description']['#default_value'] = 'course';
     
      $form['og_selective']['#type'] = 'hidden';
      $form['og_selective']['#value'] = 1; //TODO: review as this was set to 0 for course template
      $form['og_selective']['#default_value'] = 1  ;
  
      $form['og_register']['#type'] = 'hidden';
      $form['og_register']['#value'] = 0;
      $form['og_register']['#default_value'] = 0;
  
      $form['og_directory']['#type'] = 'hidden';
      $form['og_directory']['#value'] = 1;
      $form['og_directory']['#default_value'] = 1;
  
      $form['og_private']['#type'] = 'hidden';
      $form['og_private']['#value'] = 0;
      $form['og_private']['#default_value'] = 0;
  
      $form['themes']['#type'] = 'hidden';
    
      $form['field_refers_to_syllabus']['#access'] = FALSE;
      $form['field_course_dates']['#access'] = FALSE;
      // The status field can't be modified here so we need to use an after_build function
      // @see http://drupal.org/node/726282
      // @see http://benbuckman.net/tech/10/07/customizing-drupal-date-field-hookformalter-and-afterbuild
      $form['field_course_status']['#after_build'][] = 'p2pu_course_disable_status_field';
    }
  }

  if (isset($form['og_nodeapi']) && $user->uid != 1) {
    $form['og_nodeapi']['#type'] = 'hidden';
  }

  //Redirect these submits to the dashboard view of group
  //adw this #redirect breaks the delete function, so this is out for now
  /* if ($form_id == 'announcement_node_form' ||
      $form_id == 'assignment_node_form' ||
      $form_id == 'submission_node_form' ||
      $form_id == 'assignment_template_node_form' ||
      $form_id == 'discussion_node_form' ||
      $form_id == 'shout_box_node_form' ) {

    $group = og_get_group_context();
    $form['#redirect'] = array('node/'.$group->nid);
  }*/

  //Redirect the submit of a discussion to the discussion page on the group
  if ($form_id == 'discussion_node_form' ) { 
    $group = og_get_group_context();
    $form['#redirect'] = array('node/'.$group->nid.'/discussions');
   }
  
  //Redirect the submit of an event to the calendar on the group
  if ($form_id == 'event_node_form') {
    $group = og_get_group_context();
    $form['#redirect'] = array('node/'.$group->nid.'/calendar/'.date('Y-m'));
    
  }
  
  //Redirect comments
  if ($form_id == 'comment_form') {
    $node = node_load($form['nid']['#value']);
    //Discussions
    // CHARLES: I've removed Diricia's redirect, so that we redirect to the
    // course discussion which lists the comments - it was redirectint to the
    // discussions page, not sure why?
    //if ($node->type == 'discussion') {
    //  $group = og_get_group_context();
    //  $form['#redirect'] = array('node/'.$group->nid.'/discussions');
    //}
  
    //GEORGE: just doing some formatting changes
    unset($form['_author']);
    unset($form['mollom']['privacy']);
    unset($form['comment_filter']['comment']['#title']);

  }

  //Modify the organic group subscribe form to ask for the submission requirement and save the application
  if ($form_id == 'og_confirm_subscribe') {
    //Adding a checkbox in the og_confirm_subscribe form.
    $form['terms_and_cond'] = array(
    '#type' => 'checkbox',      
    '#title' =>t("Before you sign up for the course, we'd like to remind you of our !license and !privacy.
                 By default all content you create and conversations you have with other users on this site are publicly viewable.",
                 array('!license'=>l(t("license provisions"),"license"),'!privacy' => l(t("privacy guidelines"),"privacy"))),
    '#weight'=>0,
    '#element_validate' => array('p2pu_terms_and_cond_validate'),
    );
    
    $group = og_get_group_context();
    if ($group->type != 'course_template') {

//      print "<pre>";
//      print_r($form);
//      print "</pre>";
//      $template = $form['#parameters'][3];
      
      
      $form['actions']['submit']['#value'] = 'Sign-Up';
      $form['message']['#value'] = variable_get('p2pu_course_signup_message', '');
      $form['message']['#weight'] = -10;
  
      $template = $form['#parameters'][3];
      $form['request']['#title'] = 'Sign-up requirement: '.$template->field_course_sign_up_req[0]['value'];
      $form['request']['#description'] = '';
      $form['request']['#weight'] = -3;
      $form['request']['#required'] = true;
      $form['#submit'][] = 'p2pu_og_confirm_subscribe';
  
      //Background
      $form['background']['#type'] = 'textarea';
      $form['background']['#title'] = 'Background';
      $form['background']['#weight'] = -2;
      $form['background']['#rows'] = 5;
      $form['background']['#required'] = true;
  
      //Motivation field
      $form['motivation']['#type'] = 'textarea';
      $form['motivation']['#title'] = 'Motivation';
      $form['motivation']['#weight'] = -1;
      $form['motivation']['#rows'] = 5;
      $form['motivation']['#required'] = true;
      //print "<pre>";
      //print_r($form);
      //print "</pre>";
    }
  }
} // p2pu_form_alter

/*
 * Custom functions
 */

/*
 * Make certain fields in the course form read only
 *
 */
function p2pu_course_disable_status_field($form_element, &$form_state) {
  //dpm($form_element);
  $form_element['value']['#attributes'] = array('disabled' => 'disabled');
  return $form_element;
}

// Finding the assignment nid/titles for a specific group for exposed filters
function p2pu_get_assignments_for_course($gid) {
  $result = db_query("select n.nid,n.title from node n, og_ancestry oga where n.nid=oga.nid and oga.group_nid=%d and n.type='assignment'",$gid);
  $assignments = array();
  while ($row = db_fetch_object($result)) {
     $assignments[$row->nid] = $row->title;
  }
  return $assignments;
}

/*
 * Flag related function to get text returns a string indicating who has liked something.
 * TODO: make the flagged_by_text more generic, or flexible so it works when
 * using other flags.
 *
 * @param $flag_name
 *   The unique name of the flag 
 * @param $content_id
 *   The content ID (usually the node ID or comment ID).
 *
 * @return $flagged_by_text
 */
function p2pu_get_item_flag_indication($flag_name, $content_id) {
  global $user;
  // Load the flag object so we can do more stuff with it
  $flag = flag_get_flag($flag_name);
  $content_type = $flag->content_type;
  $flag_count = 0;
  $flagged_by_text = '';
  $flag_count_array = flag_get_counts($content_type, $content_id);
  $flag_count = $flag_count_array[$flag_name];
  if ($flag_count) {
    // Check if the current user has flagged the item
    $user_flags = flag_get_user_flags($content_type, $content_id, $user->uid);
    // If the current user has flagged the item
    if ($user_flags) {
      if ($user_flags && ($flag_count > 1)) {
        // If the current user and at least 1 other has also liked the item
        $other_count = $flag_count - 1;
        $flagged_by_text = 'You and ' . $other_count . ' other ' . ($other_count > 1 ? 'people ' : 'person ');
      }
      else {
        // The current user is the only person who has liked the item
        $flagged_by_text = 'You ';
      }
    }
    else {
      $flagged_by_text = $flag_count . ($flag_count > 1 ? ' people ' : ' person ');
    }
    $flagged_by_text .= 'liked this';
  }
  return $flagged_by_text;
}
/**
 * Settings page
 */
function p2pu_settings_form() {
  $form = array();

  $form['p2pu_site_name'] = array (
    '#type' => 'textfield',
    '#title' => 'P2PU Site Name',
    '#description' => 'Which site is this.  Added to messages to identify them better. Put in a proper name.  The name is send via sms to the customer as well.',
    '#default_value' => variable_get('p2pu_site_name', 'Unknown'),
    '#weight' => -5,
  );

  $form['p2pu_course_signup_message'] = array (
    '#type' => 'textarea',
    '#title' => 'Course Signup Message',
    '#description' => 'The text to display at the top of the course signup form.',
    '#default_value' => variable_get('p2pu_course_signup_message', ''),
    '#weight' => -4,
  );

  $form['next_course_open_date'] = array(
    '#type' => 'date_popup',
    '#title' => t("New date when courses open for application."),
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-0:+1',
    '#required' => TRUE,
  	'#weight' => -3,
    '#date_increment' => 1,
    '#default_value' => variable_get('next_course_open_date', date('Y-m-d')), 
  );

  $form['next_course_start_date'] = array(
    '#type' => 'date_popup',
    '#title' => t("New course start date - must be greater than opening date"),
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-0:+1',
    '#required' => TRUE,
  	'#weight' => -2,
    '#date_increment' => 1,
    '#default_value' => variable_get('next_course_start_date', date('Y-m-d')), 
  );


  return system_settings_form($form);
}

function p2pu_settings_form_validate($form, &$form_state) {

  if (strtotime($form['next_course_open_date']['#value']['date']) > strtotime($form['next_course_start_date']['#value']['date'])) {
    form_set_error('error', 'The opening date must be smaller than the start date.');
  }

  if (strtotime($form['next_course_open_date']['#value']['date']) < time() ) {
    form_set_error('error', 'The opening date must be in the future.');
  }

  if (strtotime($form['next_course_start_date']['#value']['date']) < time() ) {
    form_set_error('error', 'The start date must be in the future.');
  }

}

function p2pu_og_confirm_subscribe($form, &$form_state) {
//    echo '<pre>';
//    print_r($form);
//    print_r($form_state);
//    exit;

  //  if (strlen($form['request']['#value']) == 0 || strlen($form['background']['#value']) == 0 || strlen($form['motivation']['#value']) == 0) {
  //    return;
  //  }
  global $user;

  $application = array (
    'title' => 'Application: '.$user->name,
    'uid' => $user->uid,
    'name' => $user->name,
    'type' => 'course_application',
	'promote' => 0,
    'status' => 1,
    'comment' =>2,
    'og_public' => 0, 
    'og_groups' => array( $course->nid),
    'field_application_applicant' => array( 0 => array('uid' => $user->uid)),
    'field_application_assignme' => array( 0 => array('value' => $form['request']['#value'])),
    'field_application_background' => array( 0 => array('value' => $form['background']['#value'])),
    'field_application_motivation' => array( 0 => array('value' => $form['motivation']['#value'])),
  );

  $application = (object)$application;

  if ($application = node_submit($application)) {
    node_save($application);
  }

  $application->og_groups = array( $form['gid']['#value']);
  og_save_ancestry($application);

}

function p2pu_og($op, $nid, $uid, $message) {
  $node = node_load($nid);
  if ($op == 'user approve' && $node->type == 'course') {
    $user = user_load(array('uid'=>$uid));
    p2pu_create_report_card($user,$node);
  }
}

function p2pu_create_report_card($user,$course) {
  $report_card = array (
    'title' => 'Report: '.$user->name,
    'uid' => $user->uid,
    'name' => $user->name,
    'type' => 'report_card',
	  'promote' => 0,
    'status' => 1,
    'comment' =>2,
    'og_public' => 0, 
    'og_groups' => array( $course->nid),
    'field_report_card_user' => array( 0 => array('uid' => $user->uid)),
    'field_report_card_result' => array( 0 => array('value' => 'ungraded')),
  );

  $report_card = (object)$report_card;

  if ($report_card = node_submit($report_card)) {
    node_save($report_card);
  }

  $report_card->og_groups = array($course->nid);
  og_save_ancestry($report_card);

}

/**
 * Implementation of hook_og_link_alter().
 */
function p2pu_og_links_alter(&$links, $node) {
//      echo '<pre>';
//      print_r($links);
//      print_r($node);
//      exit;

  if (isset($node) && $node->type == 'course_template') {
    unset($links['create_announcement']);
    unset($links['create_assignment']);
    unset($links['create_course_application']);
    unset($links['create_event']);
    unset($links['create_report_card']);
    unset($links['create_submission']);
  }

  if (isset($node) && $node->type == 'course') {
    unset($links['create_assignment_template']);
    //unset($links['create_assignment']);
    unset($links['create_course_application']);
    unset($links['create_report_card']);
    unset($links['create_submission']);
    unset($links['create_shout_box']);
  }
  $nid = $node->nid;
  foreach ($links as $key => $link) {
    if (strpos($key,'create') === 0) {
      $newlink = preg_replace('/href="([^"]*)"/',"href=\"$1&destination=/node/$nid\"",$link);
      $links[$key] = $newlink;
    }
  }
}

/*
 * Make a copy of a course template as a course
 */
function p2pu_course_create_course() {
  $course_template = node_load(arg(2));

  $user = user_load($course_template->uid);

  //  echo '<pre>';
  $start_date = variable_get('next_course_start_date', date('Y-m-d'));
  $end_date = date('Y-m-d', strtotime(variable_get('next_course_start_date', date('Y-m-d')).' +'.$course_template->field_course_duration[0]['value'].'weeks'));

  $course = array (
    'title' => $course_template->title.' - '. date('M Y', strtotime(variable_get('next_course_start_date', date('M Y')))),
    'uid' => $user->uid,
    'name' => $user->name,
    'type' => 'course',
	'promote' => 0,
    'status' => 1,
  	'comment' =>2,
    'og_selective' =>1,
    'og_register' => 0,
    'og_directory' => 1,
    'og_private' => 0,
    'og_description' => $course_template->og_description,  
    'field_course_summary' => array( 0 => array('value' => $course_template->field_course_summary[0]['value'])),
    'field_course_prerequisites' => array( 0 => array('value' => $course_template->field_course_prerequisites[0]['value'])),
    'field_course_sign_up_req' => array( 0 => array('value' => $course_template->field_course_sign_up_req[0]['value'])),
    'field_course_no_of_seats' => array( 0 => array('value' => $course_template->field_course_no_of_seats[0]['value'])),
    'field_course_dates' => array( 0 => array('value' => $start_date, 'value2' => $end_date)),
    'field_course_opening_date' => array( 0 => array('value' => variable_get('next_course_open_date', date('Y-m-d')))),
    'field_course_status' => array( 0 => array('value' => '10_open')),
  );

  //  echo '<pre>';
  //  print $start_date.'<br>';
  //  print $end_date.'<br>';
  //  print_r($course);
  //  exit;

  $course = (object)$course;

  if ($course = node_submit($course)) {
    node_save($course);
  }

  $sql = "SELECT o.nid FROM {og_ancestry} o WHERE o.group_nid = %d";

  $result = db_query(db_rewrite_sql($sql), $course_template->nid);
  while ($data = db_fetch_object($result)) {
    $node = node_load($data->nid);
    if ($node->type == 'assignment_template') {
      $assignment_template = $node;
      $assignment = array (
        'title' => $assignment_template->title,
        'uid' => $user->uid,
        'name' => $user->name,
        'type' => 'assignment',
    	'promote' => 0,
        'status' => 1,
        'comment' =>2,
        'og_public' => 0,
        'og_group' => $course->nid,
        'field_assignment_detail' => array( 0 => array('value' => $assignment_template->field_assignment_detail[0]['value'])),
      );
      foreach($assignment_template->field_assignment_attachments as $attachment) {
        $assignment[field_assignment_attachments] = $attachment;
      }

      $assignment = (object)$assignment;

      if ($assignment = node_submit($assignment)) {
        node_save($assignment);
      }
      $assignment->og_groups = array( $course->nid);
      og_save_ancestry($assignment);

    }
    else if ($node->type == 'document') {
      $document_template = $node;
      $document = array (
        'title' => $document_template->title,
        'uid' => $user->uid,
        'name' => $user->name,
        'type' => 'document',
    	'promote' => 0,
        'status' => 1,
        'comment' =>2,
        'og_public' => 0, 
        'og_group' => $course->nid,
        'field_document_body' => array( 0 => array('value' => $document_template->field_document_body[0]['value'])),
        //'field_document_attachment' => array( 0 => array('value' => $document_template->field_document_attachment[0]['value'])),
      );

      $document = (object)$document;
//      echo '<pre>';
//      print_r($document);

      if ($document = node_submit($document)) {
//        print_r($document);
//        exit;
        node_save($document);
      }

      $document->og_groups = array( $course->nid);
      og_save_ancestry($document);

    }
  }
  
  drupal_set_message('The '.$course_template->title.' course has been scheduled');
  drupal_goto('node/'.$course->nid);
  

}

/*
 * Used in view og_members -> p2pu
 */
function p2pu_course_application() {
  $uid = arg(2);
  $group_id = arg(3);
  $sql = "SELECT max(n.nid)  FROM {content_type_course_application} ca INNER JOIN {node} n on n.nid = ca.nid INNER JOIN {og_ancestry} oa on oa.nid = ca.nid WHERE field_application_applicant_uid = %d and oa.group_nid = %d";
  $nid = db_result(db_query(db_rewrite_sql($sql), $uid, $group_id));
  if ($nid == NULL) {
    drupal_set_message('No application for this user');
    drupal_goto('og/users/'.$uid.'/list_p2pu');
  }
  drupal_goto('node/'.$nid);

}

/*
 * Shout form
 */
function p2pu_shout_form() {
  $form = array();
  
  $form['shout_box'] = array(
    '#type' => 'textfield',
    '#weight' => 2,
      '#size' => 100,
    );

   $form['shout'] = array(
    '#type' => 'submit',
    '#value' => t("Shout"),
    '#submit' => array('p2pu_shout_form_submit'),
    '#weight' => 2,
  );

   $form['group'] = array(
    '#type' => 'hidden',
    '#value' => arg(1),
    '#default_value' => arg(1),
    '#weight' => 3,
  );
  
  return $form;
}

function p2pu_shout_form_submit($form,&$form_state) {
    global $user;
    $shoutbox = array (
      'title' => 'Shout Box: '.$form['group']['#value'].date('Y-m-d H:s') ,
      'uid' => $user->uid,
      'name' => $user->name,
      'type' => 'shout_box',
  	  'promote' => 0,
      'status' => 1,
      'comment' =>2,
      'og_public' => 0, 
      'field_shoutbox_shout' => array( 0 => array('value' => $form['shout_box']['#value'])),
    );

    $shoutbox = (object)$shoutbox;

//  echo '<pre>';
//  print_r($shoutbox);
//  exit;
    
    if ($shoutbox = node_submit($shoutbox)) {
      node_save($shoutbox);
    }
    $shoutbox->og_groups = array($form['group']['#value']);
    og_save_ancestry($shoutbox);
    
    $form['#redirect'][] = 'node/'.$form['group']['#value'].'/shoutbox';
}


function p2pu_views_pre_execute(&$view) {
  
  if ($view->name == 'course_events' ) {
    $group_id = $view->args[2];
    $group = node_load($group_id);
    $view->title = $group->title;
  }
  
}

function p2pu_realname_from_uid($uid) {
  global $user;
  if ($uid == $user->$uid) {
    $account = $user; 
  } else {
    $account = user_load($uid);
  }
  return theme('username',$account,array('plain' => TRUE));
}

//$group = og_get_group_context();
//global $user;
//if ($user->uid == 0) {
//  $register = l('register', 'user/register', array('query' => 'destination=node/'.$group->nid));
//  $login = l('login', 'user/login', array('query' => 'destination=node/'.$group->nid));
//  print ('You must '.$register.' or '.$login.' in order to post into this group.');
//  return;  
//}
//if (!og_is_group_member($group->nid)) {
//  $link = l('Sign-up', 'og/subscribe/'.$group->nid, array('query' => 'destination=node/'.$group->nid));
//  print ($link);
//  return;
//}
//$link = l('Add a document', 'node/add/document', array('query' => 'gids[]='.$group->nid));
//print ($link);

function p2pu_toggle_signup_link($nid) {
  $current = db_result(db_query("select og_selective from og where nid=%d",$nid));
  if ($current != OG_CLOSED) {
    print l(t('Close Applications'),"toggle-signup/$nid");
  } else {
    print l(t('Re-open Applications'),"toggle-signup/$nid");
  }
}

function p2pu_toggle_signup($node) {
  #$current = db_result(db_query("select og_selective from og where nid=%d",$node->nid));
  $current = $node->og_selective;
  if ($current != OG_CLOSED) {
    $new = OG_CLOSED;
    $text = "Closed";
  } else {
    $new = OG_MODERATED;
    $text = "Re-Opened";
  }
  db_result(db_query("update og set og_selective=%d where nid=%d",$new,$node->nid));
  return 'Applications for <a href="/node/'.$node->nid.'">'.$node->title.'</a> is now '.$text;
}

function p2pu_delete_incorrect_report_cards() { 
  $result = db_query(" select n.nid from node n, og_ancestry oga, content_type_report_card rc where n.nid=oga.nid and n.vid=rc.vid and oga.group_nid*10000+rc.field_report_card_user_uid not in  (select nid*10000+uid as code from og_uid)");
  while ($row = db_fetch_array($result)) {
    print "Deleting node ".$row['nid']."\n";
    node_delete($row['nid']);
  }
}

/* COPY OF the ATRIUM ACTIVITY VIEWS STUFF */
/**
 * Implementation of hook_views_api().
 * This is required for our module to have its include files loaded
 */
function p2pu_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'p2pu') .'/includes',
  );
}


 /**
 * Custom menu_local_tasks function.
 *
 * Will return the local tasks (tabs) for a given path.
 *
 * @param $node_path
 *  The path of the node for which we are generating the local tasks - e.g. 'node/3435'
 *  This will be the course path - normally with extra query string items at the
 *  end to indicate that we're viewing a document within that course etc. as setup
 *  in the panel page overrides for the course nodes.
 * @param $level
 *   The level of tasks you ask for. Primary tasks are 0, secondary are 1.
 * @param $return_root
 *   Whether to return the root path for the current page.
 * @return
 *   Themed output corresponding to the tabs of the requested level, or
 *   router path if $return_root == TRUE. This router path corresponds to
 *   a parent tab, if the current page is a default local task.
 * @see menu_local_tasks
 */

function p2pu_custom_menu_local_tasks($node_path, $level = 0, $return_root = FALSE) { 
  static $tabs;
  static $root_path;

  if (!isset($tabs)) {

    $tabs = array();
    $router_item = menu_get_item($node_path);
    if (!$router_item || !$router_item['access']) {
      return '';
    }
    // Get all tabs and the root page.
    $result = db_query("SELECT * FROM {menu_router} WHERE tab_root = '%s' ORDER BY weight, title", $router_item['tab_root']);
    //$map = arg();
    // We provide our own path
    $map = explode('/', $node_path);
    $children = array();
    $tasks = array();
    $root_path = $router_item['path'];

    while ($item = db_fetch_array($result)) {
      _menu_translate($item, $map, TRUE);
      if ($item['tab_parent']) {
        // All tabs, but not the root page.
        $children[$item['tab_parent']][$item['path']] = $item;
      }
      // Store the translated item for later use.
      $tasks[$item['path']] = $item;
    }
    // Find all tabs below the current path.
    $path = $router_item['path'];
    // Tab parenting may skip levels, so the number of parts in the path may not
    // equal the depth. Thus we use the $depth counter (offset by 1000 for ksort).
    $depth = 1001;
    while (isset($children[$path])) {
      $tabs_current = '';
      $next_path = '';
      $count = 0;
      foreach ($children[$path] as $item) {
        if ($item['access']) {
          $count++;
          // The default task is always active.
          if ($item['type'] == MENU_DEFAULT_LOCAL_TASK) {
            // Find the first parent which is not a default local task.
            for ($p = $item['tab_parent']; $tasks[$p]['type'] == MENU_DEFAULT_LOCAL_TASK; $p = $tasks[$p]['tab_parent']);
            $link = theme('menu_item_link', array('href' => $tasks[$p]['href']) + $item);
            $tabs_current .= theme('menu_local_task', $link, TRUE);
            $next_path = $item['path'];
          }
          else {
            $link = theme('menu_item_link', $item);
            $tabs_current .= theme('menu_local_task', $link);
          }
        }
      }
      $path = $next_path;
      $tabs[$depth]['count'] = $count;
      $tabs[$depth]['output'] = $tabs_current;
      $depth++;
    }

    // Find all tabs at the same level or above the current one.
    $parent = $router_item['tab_parent'];
    $path = $router_item['path'];
    $current = $router_item;
    $depth = 1000;
    while (isset($children[$parent])) {
      $tabs_current = '';
      $next_path = '';
      $next_parent = '';
      $count = 0;
      foreach ($children[$parent] as $item) {
        if ($item['access']) {
          $count++;
          if ($item['type'] == MENU_DEFAULT_LOCAL_TASK) {
            // Find the first parent which is not a default local task.
            for ($p = $item['tab_parent']; $tasks[$p]['type'] == MENU_DEFAULT_LOCAL_TASK; $p = $tasks[$p]['tab_parent']);
            $link = theme('menu_item_link', array('href' => $tasks[$p]['href']) + $item);
            if ($item['path'] == $router_item['path']) {
              $root_path = $tasks[$p]['path'];
            }
          }
          else {
            $link = theme('menu_item_link', $item);
          }
          // We check for the active tab.
          if ($item['path'] == $path) {
            $tabs_current .= theme('menu_local_task', $link, TRUE);
            $next_path = $item['tab_parent'];
            if (isset($tasks[$next_path])) {
              $next_parent = $tasks[$next_path]['tab_parent'];
            }
          }
          else {
            $tabs_current .= theme('menu_local_task', $link);
          }
        }
      }
      $path = $next_path;
      $parent = $next_parent;
      $tabs[$depth]['count'] = $count;
      $tabs[$depth]['output'] = $tabs_current;
      $depth--;
    }
    // Sort by depth.
    ksort($tabs);
    // Remove the depth, we are interested only in their relative placement.
    $tabs = array_values($tabs);
  }
  
  if ($return_root) {
    return $root_path;
  }
  else {
    // We do not display single tabs.
    return (isset($tabs[$level]) && $tabs[$level]['count'] > 1) ? $tabs[$level]['output'] : '';
  }
}

// Removing the details of this visit for pages used in monitoring
function p2pu_exit() {
  global $user;
  
  //if this is the civic hacking course that is used as part of monitoring
  //remove this entry from the statistics
  if ((arg(0) == 'node') && (arg(1) == 716)) {
    // A node has been viewed (and logged by the statistics module),
    // so decrement what statistics.module incremented
    db_query('UPDATE {node_counter} SET daycount = daycount - 1, totalcount = totalcount - 1 WHERE nid = %d', arg(1));
 
    $referrer = referer_uri();
    $hostname = ip_address(); // http://drupal.org/node/114774#ip-address
    
    //now remove the visit from the regular access log
    $sql = "DELETE FROM {accesslog} ";
    $sql .= "WHERE title='%s' AND path='%s' AND url='%s' AND hostname='%s' AND uid=%d";
    db_query($sql,drupal_get_title(), $_GET['q'], $referrer, $hostname, $user->uid);
    
    //finally, don't save the users session        
    session_save_session(false);
  }
}

/**
* Implementation of hook_action_info().
*
* Provide custom P2PU actions to be triggered by rules.
* 
*/
function p2pu_action_info() {
  return array(
    'p2pu_create_course_syllabus_action' => array(
      'description' => t('Create empty course syllabus document and link to course.'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('insert'),
        ),
      ),
  );
}

/**
* Implementation of a Drupal action.
* Blocks the current user.
*/
function p2pu_create_course_syllabus_action(&$object, $context = array()) {
  global $user;
  $document = new StdClass();
	$document->type = "document";
	$document->status = 1;
	$document->sticky = 1;
	$document->uid = $user->uid;
	$document->name = $user->name;
	$document->title = "Syllabus for " . $object->title;
	$body_text = t("This is the Syllabus for your Course. Any course participant is allowed to edit this page. Be the first to edit the page by clicking on 'Edit' next to the name of the page (in the Course Material block on the left).");
  $document->field_document_body[0]['value'] = $body_text;
  $document->body = $body_text;
  $document->og_initial_groups[0][$object->nid];
	$document->og_groups[0] = $object->nid;
	$document->og_public = 1;
	$document->og_groups_names[0] = $object->title;
  $group_node = og_determine_context_get_group($object);
  og_set_group_context($group_node);
	if ($document = node_submit($document)) {
	  node_save($document);
    $document->og_groups = array($object->nid);
    og_save_ancestry($document);        
    $syllabus_url = l('course syllabus', 'node/' . $document->nid);
    $message = t('Automatically created !syllabus for %course_name.', array('!syllabus' => $syllabus_url, '%course_name' => check_plain($object->title)));
    
    // Now add the nid of the document as a node reference
    $object->field_refers_to_syllabus[0]['nid'] = $document->nid;
    watchdog('action', $message);
    drupal_set_message($message);
  }
  else {
    $message = t('Could not creat course syllabus for %course_name.', array('%course_name' => check_plain($object->title)));
    watchdog('action', $message);
    drupal_set_message($message);
  }
}

