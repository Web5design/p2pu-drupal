<?php
// $Id$
/**
 * @file
 * We use this file to store custom scripts that we want to run on the site, and
 * also to store in version control so we can use them or adapt them in future.
 * We can then call them by enabling this module and then running any function
 * defined here from devel/php (devel is set as a dependency).
 */


/**
 * Adds content type subscriptions for users in a course that aren't subscribed
 * to notifications for the selected content types.
 *
 * @param $content_types Array of the content types we want to subscribe the users to
 *
 */
function p2pu_custom_scripts_update_subscriptions($content_types = array()) {
	// Set up some default variables
	//$content_types = array('announcement', 'assignment', 'discussion', 'document');
	//$content_types = array('forum');
	if (!empty($content_types)){
		$result = db_query("SELECT u.uid, u.name, u.status FROM {users} u 
		WHERE u.status = 1 AND u.uid <> 0 
		ORDER BY u.name ASC");
		while ($u = db_fetch_object($result)) {
			$items[] = $u;
		}
		foreach ($items as $item) {
			$user_link = l($item->name, "http://p2pu.org/user/" . $item->uid);
			print "<h3>User: $user_link </h3>\n\n";
			$user = user_load($item->uid);
			if (!empty($user->og_groups)) {
				foreach($user->og_groups as $group) {
					if ($group['type'] == 'course') {
						print "<strong>" . $group['title'] . "</strong><br />\n";
						// Subscribe the user for each content type
						// We don't have to check for duplicates, as the function notifications_save_subscription
						// will check and performs an update if it's already a subscription
						// NOTE: If the subscription send method is different, it will create a
						// new subscription - so we must be sure that only 1 subscription method is being
						// used for all users...
						
						// * Announcement * Assignment * Discussion * Document
						foreach ($content_types as $type) {
							$subscription = array(
								'type' => 'grouptype',
								'uid' => $user->uid,
								'send_interval' => 0,
								'send_method' => 'phpmailer',
								'fields' => array(
																	'group' => (string) $group[nid],
																	'type' => $type,
																 ),
								);
							// Save the subscription
							//print "Subscription details: \n\n";
							//dprint_r($subscription);
							notifications_save_subscription($subscription);
							print "Subscription saved for content type: $type <br />\n";        
						}
					}
				}
				//print $message;    
			}
			else {
				print "User does not belong to any groups<br />\n";
			}
		}		
	}
	else {
		drupal_set_message(t('Please input an array of content types as the function variable'));
	}

}

function p2pu_custom_scripts_set_og_forums_public() {
	db_query("UPDATE {og_term} SET public = %d", PUBLIC_BY_GROUP_OWNER);
	drupal_set_message(t('OG forum permissions set to PUBLIC.'));
}

/**
 * Adds a course node thread subscription for each member of that course 
 *
 * @param $nids Array of the group node ids we want to subscribe the users to
 *
 */
function p2pu_custom_scripts_subscribe_members_to_course_thread($nids = array()) {
	
	// For each couse on the site that is open or running
	$result = db_query("SELECT n.nid FROM {node} n, {content_type_course} c WHERE
										 n.nid = c.nid AND
										 c.field_course_status_value IN ('10_open', '20_running')");
	while ($node_obj = db_fetch_object($result)) {
		$courses[] = node_load($node_obj->nid);
	}
	foreach ($courses as $course) {
		//dpm($course);
		// Load all members of the course
		$result = db_query(og_list_users_sql(0, 0, NULL), $course->nid);
		$cntpending = $cntall = 0;
		$subscription = '';
		while ($user = db_fetch_object($result)) {
			if ($user->is_active) {
				// Only subscribe users who have been approved, to the thread
				$type = 'thread';
				$event_type = 'node';
				$field = 'nid';
				$value = $course->nid;
				$subscription = array(
						'uid' => $user->uid,
						'type' => $type,
						'event_type' => $event_type,
						'fields' => array($field => $value),
					);
				notifications_save_subscription($subscription); // This function handles duplicate subscriptions
				drupal_set_message(t('User @uid was subscribed to course @course home page comments.', array('@uid' => $user->uid, '@course' => $course->title)));						
			}
		}				
	}
}

/**
 * Find all users who have applied for a course and their application is still pending,
 * then unsubscribe from group(course) content notifications. They should only be subscribed
 * once approved by the course organiser.
 */
function p2pu_custom_scripts_clear_pending_member_course_notification_subscriptions() {
	// For each couse on the site that is open or running
	$result = db_query("SELECT * FROM {og_uid} WHERE is_active = 0");
	while ($og_member = db_fetch_object($result)) {
		$account = user_load(array('uid' => $og_member->uid));
		og_notifications_user_unsubscribe($account, $og_member->nid);
		echo $og_member->uid . ", " . $og_member->nid . ";\n";
	}
}